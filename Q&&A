1、k8s的pod和docker里的container是一样的嘛 如果不一样 区别是啥?
答:
在Kubernetes中，pod是最小的可调度和可部署的单元。一个pod包含一个或多个紧密相关的容器，它们共享同一个网络命名空间（Network Namespace）和存储卷（Volume），
并且可以通过本地进程间通信（IPC）和共享文件系统（Shared Filesystem）等方式进行交互。简单来说，pod是一组docker容器的集合，便于管理和协同工作。
而Docker容器则是一个轻量级的、独立运行的软件包装形式，它将应用程序及其依赖项打包在一起，并提供了跨平台移植性和隔离性。与传统虚拟化技术相比，
Docker容器更加轻量级、快速、灵活，能够大幅提高开发、测试和部署效率。在Docker中，每个容器都有自己的网络命名空间、进程空间和文件系统，彼此之间相互隔离，避免了应用程序之间的冲突和干扰。
因此，Docker容器和Kubernetes pod是有区别的。Docker容器更侧重于单个应用程序或服务的隔离和封装，而Kubernetes pod则更注重应用程序或服务之间的协同和管理。
Kubernetes pod可以包含多个Docker容器，这些容器共享相同的资源，并能够以高效可靠的方式进行协作，从而实现更好的应用程序部署、扩展和管理。

2、什么是linux文件系统?
答:
在Linux系统中，文件系统是指将文件和目录组织成树形结构，并为其提供访问和管理的一种机制。典型的Linux文件系统由bootfs和rootfs两部分组成。
bootfs（引导文件系统）是启动过程中使用的文件系统，通常包含引导加载程序（bootloader）和内核镜像（kernel image）。
当计算机启动时，BIOS或UEFI会读取bootloader，从而启动操作系统内核。在内核启动后，bootfs就不再需要了，通常会被卸载（umount）以释放资源。
rootfs（根文件系统）是Linux系统中的根文件系统，包含/dev、/proc、/bin、/etc、/usr等标准目录和文件。
它是所有其他文件系统的基础，在启动过程中会被挂载（mount）到虚拟文件系统树中的/目录下，成为系统的根目录。
因此，rootfs是整个Linux系统的核心，它决定了系统能够提供哪些服务和功能。
需要注意的是，随着Linux系统的发展和变化，现代的Linux文件系统已经变得更加复杂和多样化，例如EXT4、Btrfs、XFS等文件系统都广泛应用于Linux系统中。
同时，Linux系统也支持使用网络文件系统（NFS）等远程文件系统，从而实现文件共享和分布式存储。

3、linux中vim编辑保存后inode会发生变化嘛?
答:
取决于backupcopy是no还是yes,默认是no，也就是不管是否改变内容，保存就会生成新inode。
在vim .vimrc设置。

4、Linux用户想要使用网络功能
答:
在Linux系统中，网络功能是通过通用的Linux网络设备来实现的，例如eth0、wlan0等。这些设备是由Linux内核通过驱动程序和硬件接口生成的，供用户使用和管理。
当系统里装有一个硬件网卡时，Linux会自动为它创建一个对应的网络设备实例，
例如eth0。用户可以通过命令行工具（如ifconfig、ip等）或图形化界面（如Network Manager）来配置和管理这个网络设备，从而实现网络连接和数据传输等功能。
需要注意的是，Linux网络设备不仅限于物理网卡，还可以包括虚拟网卡、桥接设备、VPN接口等各种类型。用户可以根据需求选择不同类型的网络设备，并使用相应的命令和工具进行配置和管理。

5、Bridge(桥)是什么?
答:
Bridge（桥）是一个用于在Linux系统中实现TCP/IP二层协议交换的设备。
它可以将多个网络接口连接起来，类似于现实世界中的交换机，从而形成一个局域网。
当数据到达时，Bridge通过检查数据包头部的MAC地址，决定是否广播、转发或丢弃该数据包。这种方式可以有效地分离不同的网络，并防止数据包冲突和重复发送，提高网络传输效率和可靠性。
在Linux系统中，管理员可以使用brctl命令来创建和管理Bridge设备实例，例如添加、删除和配置Bridge设备等。
同时，Bridge还可以与其他网络设备（例如物理网卡、虚拟网卡）进行连接，实现设备间的通信和数据转发。

6、Docker端口映射
答:
在Docker中，端口映射是将容器内的端口映射到主机上的一个或多个端口，从而实现容器和外部网络之间的通信。Docker提供了-p或--publish选项来实现端口映射，
例如：docker run -p 8080:80 nginx
这条命令将容器内的80端口映射到主机的8080端口上，使得通过访问http://localhost:8080即可访问容器内的Nginx服务。
端口映射的底层实现依赖于Linux系统的iptables工具。当Docker容器启动时，Docker会自动创建一条iptables规则，将主机的指定端口（如8080）映射到容器的指定端口（如80）上。
这样，在访问主机的8080端口时，iptables会将请求重定向到对应的容器内部端口上。
需要注意的是，端口映射也可以通过手动配置iptables规则来实现，而不必使用Docker提供的-p选项。
这种方式需要管理员有一定的Linux网络知识和技能，并且可能增加了配置的复杂性和不稳定性。因此，建议在大多数情况下使用Docker提供的-p选项来实现端口映射。

7、平时一般去那里搜索技术文章?
答:
Google和Bing：这两个搜索引擎是全球最大的搜索引擎，能够提供各种技术文章和文档，并且拥有高效的搜索算法和优秀的搜索结果排名。
Stack Overflow：这是全球最大的技术问答社区之一，包含了数百万个问题和答案，覆盖了各种编程语言、平台和工具。
在Stack Overflow上可以找到大量的技术文章和教程，以及解决实际问题的有效方法和思路。
SegmentFault：这是中国最大的技术社区之一，汇聚了大量的技术爱好者和专业人士，提供了丰富的技术文章、问答和交流资源，涉及了开发、运维、设计、数据等多个领域。
此外，还有GitHub、CSDN、知乎等网站也提供了大量的技术文章和资源，在寻找技术文章时也可以参考。
另外，社交媒体平台如Twitter、LinkedIn等也是许多行业专家和技术大牛分享经验和见解的重要渠道。

8、nginx java
答:
在Java应用服务器和Nginx服务器之间配合时，通常采用反向代理和负载均衡的方式来实现高效、稳定的服务。具体来说，可以通过以下耦合方式：
将静态资源（如HTML、CSS、JavaScript文件）交给Nginx来处理，动态请求则转发给Java应用服务器（例如Tomcat）进行处理。
这种方式可以利用Nginx快速响应静态请求并减轻Java服务器的压力，同时保证动态请求的处理能力和灵活性。
利用Nginx自身的负载均衡功能，将请求分发给多台Java应用服务器进行处理，从而提高系统的可用性和扩展性。
同时，可以通过Nginx提供的健康检查和故障转移等机制，实现对Java服务器的优化和容错，避免单点故障和服务中断。
需要注意的是，在使用Nginx反向代理时，需要进行相应的配置和调优，以确保请求的正确转发和响应。
例如，需要设置upstream模块来定义后端服务器组，利用proxy_pass指令将请求转发到后端服务器上，并根据需求设置buffering、proxy_buffer_size等参数来优化转发效率。
同时，还需要考虑安全性、缓存、日志等方面的问题，以确保系统的稳定性和安全性。

9、servlet是什么?
答:
Servlet是Java Web应用程序的核心组件之一，它是运行在Web服务器上的Java类，用于处理HTTP请求和响应。
通常情况下，在Servlet容器启动时，会自动初始化Servlet并加载到内存中，从而提供对Web应用程序的支持。
Servlet有许多优点，包括：
跨平台性：Servlet是用Java编写的，并且与协议和平台无关，因此可以在不同的操作系统和Web服务器上运行。
动态性：Servlet能够动态地生成Web内容，从而实现个性化和定制化的Web应用程序。
高效性：Servlet容器将Servlet加载到内存中后，能够快速响应请求并处理业务逻辑，从而提高Web应用程序的性能和可靠性。
可扩展性：Servlet容器支持Servlet API，并提供了许多扩展机制，如过滤器、监听器等，使得开发人员可以方便地扩展和定制Web应用程序。
需要注意的是，Java Servlet是作为Java EE规范的一部分发布的，因此它必须遵循相关的规范和标准，以确保在不同的Servlet容器上具有一致性和互操作性。
同时，Servlet也依赖于Java EE环境和Servlet容器的支持，因此需要了解和掌握相应的技术和工具。

10、tomcat
答:
Tomcat是一个常用的开源Servlet容器和Web服务器，它支持Java Servlet和JavaServer Pages（JSP）等Web应用程序技术，并提供了丰富的功能和插件，
如连接池、安全性、负载均衡、SSL等。Tomcat是Apache组织的一个开源项目，目前最新的版本是Tomcat 10。
JavaServer Pages（JSP）是一种动态网页技术，它允许开发人员将Java代码嵌入到HTML页面中，从而生成动态的Web内容。在JSP中，Java代码通常使用<%...%>标签来包含，
也可以使用EL表达式和JSTL标签库实现更复杂的逻辑和操作。
Java Servlet是用Java编写的服务器端程序，它是JavaEE规范的一部分，用于处理HTTP请求和响应。Servlet运行于Servlet容器中，
例如Tomcat、Jetty、JBoss等，在接收到客户端的请求后，Servlet容器会调用相应的Servlet进行处理，并将结果返回给客户端。
需要注意的是，Tomcat不仅是一个Servlet容器，还是一个Web服务器，具有独立的网络协议栈和线程模型，能够提供高性能的Web服务。
同时，Tomcat也支持多个虚拟主机和多个Web应用程序，从而实现Web服务的多样化和扩展性。

11、ansible各个组件
答:
1)ansible            主程序
2)connection plugins 主机和节点之间通信
3)host inventory     主机清单 也就是配置主机地方
4)core modules       核心模块 自定义模块等等
5)custom modules     自定义模块
6)plugins            使用插件来完成记录日志 邮件等其它功能
7)playbooks          执行复杂任务 还有个ad-hoc执行简单任务

12、nginx cpu mem的关系 也就是用多大的CPU和多大的内存
答:
nginx作为反向代理服务器的时候 客户端2个(80 443)  服务端2个(80 443)
max_clients = worker_processes * worker_connections/4
worker_processes和cpu相关
worker_connections内存 file-max nofile noproc
file-max ≈ 内存大小/10K
最终得出结论 建议4核(4线程)8G内存能充分利用1台机器资源

13、exec命令的三个场景使用
exec这个命令通常用的比较少 但还是要了解下哈
1)调用并执行指定的命令
重置root密码的会用到
exec /sbin/init
这个时候再执行init的时候什么不需要加参数呢 因为是执行/sbin/init的本身程序 程序还没起来。。哪里来init命令呢。
2)重定向     一般用在shell里
exec 1>$logfile
exec 2>$logfile
3)可以和find结合使用
find . -type f -exec ls -l {} \;

14、


15、


16、


17、


18、


19、


20、
